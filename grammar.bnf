/* C-like JVM Language Grammar - Juno Language */
/* Complete BNF specification reflecting current implementation */
/* File extension: .cl (C-Like) or .juno */

/* PROGRAM STRUCTURE */

<program>           ::= <statement_list>
                      | /* empty */

<statement_list>    ::= <statement>
                      | <statement_list> <statement>

<statement>         ::= <declaration>
                      | <control_statement>
                      | <expression_statement>
                      | <block_statement>

<declaration>       ::= <import_declaration>
                      | <module_declaration>
                      | <function_declaration>
                      | <variable_declaration>
                      | <type_alias_declaration>
                      | <public_declaration>

/* MODULE SYSTEM */

<module_declaration> ::= "module" <identifier> "{" <statement_list> "}"

<import_declaration> ::= "import" <identifier> ";"
                       | "import" <identifier> "." "{" <identifier_list> "}" ";"

<identifier_list>   ::= <identifier>
                      | <identifier_list> "," <identifier>

<qualified_identifier> ::= <identifier> "." <identifier>

<public_declaration> ::= "public" <function_declaration>
                       | "public" <variable_declaration>
                       | "public" <type_alias_declaration>

/* TYPE SYSTEM */

<type>              ::= <union_type>

<union_type>        ::= <basic_type>
                      | <union_type> "|" <basic_type>

<basic_type>        ::= <primitive_type>
                      | <optional_type>
                      | <auto_type>
                      | <any_type>
                      | <struct_type>

<optional_type>     ::= "optional" <basic_type>

<auto_type>         ::= "auto"

<any_type>          ::= "any"

<primitive_type>    ::= <signed_integer_type>
                      | <unsigned_integer_type>
                      | <floating_point_type>
                      | <other_primitive_type>

<signed_integer_type> ::= "byte"
                        | "short"
                        | "int"
                        | "long"

<unsigned_integer_type> ::= "ubyte"
                          | "ushort"
                          | "uint"
                          | "ulong"

<floating_point_type> ::= "float"
                        | "double"

<other_primitive_type> ::= "char"
                         | "string"
                         | "bool"
                         | "void"

<struct_type>       ::= <identifier>

<type_alias_declaration> ::= "type" <identifier> "=" <type> ";"

/* DECLARATIONS */

<function_declaration> ::= <type> <identifier> "(" ")" <block_statement>
                         | <type> <identifier> "(" <parameter_list> ")" <block_statement>

<parameter_list>    ::= <parameter>
                      | <parameter_list> "," <parameter>

<parameter>         ::= <type> <identifier>

<variable_declaration> ::= <type> <identifier> ";"
                         | <type> <identifier> "=" <expression> ";"

/* CONTROL STATEMENTS */

<control_statement> ::= <if_statement>
                      | <while_statement>
                      | <for_in_statement>
                      | <return_statement>

<block_statement>   ::= "{" "}"
                      | "{" <statement_list> "}"

<expression_statement> ::= <expression> ";"

<if_statement>      ::= "if" <expression> <statement>
                      | "if" <expression> <statement> "else" <statement>

<while_statement>   ::= "while" <expression> <statement>

<for_in_statement>  ::= "for" <type> <identifier> "in" <expression> <statement>
                      | "for" <type> <identifier> "=" <expression> "in" <expression> <statement>

<return_statement>  ::= "return" ";"
                      | "return" <expression> ";"

/* EXPRESSIONS */
/* Expression precedence (highest to lowest):
 * 1. Primary expressions (literals, identifiers, parentheses)
 * 2. Function calls
 * 3. Unary operators (-, +, !)
 * 4. Cast expressions (<type>(expr))
 * 5. Multiplicative (*, /, %)
 * 6. Additive (+, -)
 * 7. String concatenation (^^)
 * 8. Relational (<, <=, >, >=)
 * 9. Equality (==, !=)
 * 10. Logical AND (&&)
 * 11. Logical OR (||)
 * 12. Assignment (=)
 */

<expression>        ::= <assignment_expression>

<assignment_expression> ::= <logical_or_expression>
                          | <logical_or_expression> "=" <assignment_expression>

<logical_or_expression> ::= <logical_and_expression>
                          | <logical_or_expression> "||" <logical_and_expression>

<logical_and_expression> ::= <equality_expression>
                           | <logical_and_expression> "&&" <equality_expression>

<equality_expression> ::= <relational_expression>
                        | <equality_expression> "==" <relational_expression>
                        | <equality_expression> "!=" <relational_expression>

<relational_expression> ::= <concatenation_expression>
                          | <relational_expression> "<" <concatenation_expression>
                          | <relational_expression> "<=" <concatenation_expression>
                          | <relational_expression> ">" <concatenation_expression>
                          | <relational_expression> ">=" <concatenation_expression>

<concatenation_expression> ::= <additive_expression>
                             | <concatenation_expression> "^^" <additive_expression>

<additive_expression> ::= <multiplicative_expression>
                        | <additive_expression> "+" <multiplicative_expression>
                        | <additive_expression> "-" <multiplicative_expression>

<multiplicative_expression> ::= <unary_expression>
                              | <multiplicative_expression> "*" <unary_expression>
                              | <multiplicative_expression> "/" <unary_expression>
                              | <multiplicative_expression> "%" <unary_expression>

<unary_expression>  ::= <call_expression>
                      | <cast_expression>
                      | "+" <unary_expression>
                      | "-" <unary_expression>
                      | "!" <unary_expression>

<cast_expression>   ::= "<" <type> ">" "(" <expression> ")"
                      | <type> "<" <expression> ">"

<call_expression>   ::= <primary_expression>
                      | <call_expression> "(" ")"
                      | <call_expression> "(" <argument_list> ")"

<primary_expression> ::= <literal>
                       | <identifier>
                       | <qualified_identifier>
                       | "(" <expression> ")"

/* LITERALS AND ARGUMENTS */

<literal>           ::= <integer_literal>
                      | <float_literal>
                      | <character_literal>
                      | <string_literal>
                      | <boolean_literal>

<integer_literal>   ::= <decimal_digits>
                      | <decimal_digits> <integer_suffix>

<decimal_digits>    ::= <digit>
                      | <decimal_digits> <digit>

<integer_suffix>    ::= "u" | "U" | "l" | "L"
                      | "u" "l" | "u" "L" | "U" "l" | "U" "L"
                      | "l" "u" | "l" "U" | "L" "u" | "L" "U"

<float_literal>     ::= <decimal_digits> "." <decimal_digits>
                      | <decimal_digits> "." <decimal_digits> <float_suffix>
                      | <decimal_digits> <float_suffix>

<float_suffix>      ::= "f" | "F" | "d" | "D"

<character_literal> ::= "'" <character_content> "'"

<character_content> ::= <escape_sequence>
                      | /* any printable character except ' and \\ */

<string_literal>    ::= '"' '"'
                      | '"' <string_content_list> '"'

<string_content_list> ::= <string_content>
                        | <string_content_list> <string_content>

<string_content>    ::= <escape_sequence>
                      | /* any printable character except " and \\ */

<escape_sequence>   ::= "\\" "n"
                      | "\\" "t"
                      | "\\" "r"
                      | "\\" "\\"
                      | "\\" "'"
                      | "\\" '"'
                      | "\\" "0"

<boolean_literal>   ::= "true" | "false"

<argument_list>     ::= <expression>
                      | <argument_list> "," <expression>

/* LEXICAL ELEMENTS (terminals) */

<identifier>        ::= <letter> <identifier_rest>
                      | <letter>

<identifier_rest>   ::= <letter>
                      | <digit>
                      | "_"
                      | <identifier_rest> <letter>
                      | <identifier_rest> <digit>
                      | <identifier_rest> "_"

<digit>             ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<letter>            ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
                      | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
                      | "u" | "v" | "w" | "x" | "y" | "z"
                      | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
                      | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
                      | "U" | "V" | "W" | "X" | "Y" | "Z"
                      | "_"

/* KEYWORDS AND OPERATORS */
/* Keywords: auto, any, optional, type, import, module, public */
/* Types: void, bool, char, string, byte, ubyte, short, ushort, int, uint, long, ulong, float, double */
/* Control: if, else, while, for, in, return, true, false */
/* Operators: +, -, *, /, %, =, ==, !=, <, <=, >, >=, &&, ||, !, ^^ */
/* Delimiters: (, ), {, }, [, ], ;, ,, . */
/* Casts: <type>(expr) or type<expr> */
