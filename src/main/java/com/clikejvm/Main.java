package com.clikejvm;

import com.clikejvm.lexer.Lexer;
import com.clikejvm.parser.Parser;
import com.clikejvm.ast.Program;
import com.clikejvm.types.TypeChecker;
import com.clikejvm.codegen.CodeGenerator;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Main entry point for the C-like JVM language compiler/interpreter.
 */
public class Main {
    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: java -jar clike-jvm-lang.jar <source-file>");
            System.exit(1);
        }

        String sourceFile = args[0];
        try {
            compile(sourceFile);
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void compile(String sourceFile) throws IOException {
        Path sourcePath = Paths.get(sourceFile);
        if (!Files.exists(sourcePath)) {
            throw new IllegalArgumentException("Source file not found: " + sourceFile);
        }

        String source = Files.readString(sourcePath);
        
        System.out.println("Compiling: " + sourceFile);
        
        // Lexical Analysis
        System.out.println("Phase 1: Lexical Analysis");
        Lexer lexer = new Lexer(source);
        var tokens = lexer.tokenize();
        System.out.println("Found " + tokens.size() + " tokens");

        // Parsing
        System.out.println("Phase 2: Parsing");
        Parser parser = new Parser(tokens);
        Program program = parser.parseProgram();
        System.out.println("Parsed program with " + program.getStatements().size() + " statements");

        // Type Checking
        System.out.println("Phase 3: Type Checking");
        TypeChecker typeChecker = new TypeChecker();
        typeChecker.check(program);
        System.out.println("Type checking completed successfully");

        // Code Generation
        System.out.println("Phase 4: Code Generation");
        CodeGenerator codeGen = new CodeGenerator();
        String outputClass = sourceFile.replace(".cl", "");  // .cl extension for our language
        codeGen.generate(program, outputClass);
        System.out.println("Generated bytecode: " + outputClass + ".class");
    }
}